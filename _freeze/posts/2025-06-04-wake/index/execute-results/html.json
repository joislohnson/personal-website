{
  "hash": "e487ad50d91da16e639dcbf97552304b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"An Attempt at Streamlining Secondary Data Analysis\"\ndescription: \"Sourcing indicators from NC data tools and using R + Quarto to generate summary tables for the 2025 Wake County CHNA.\"\nauthor:\n  - name: Lois Adler-Johnson\ndate: 06-10-2025\ncategories: [Data Viz, Quarto, R, Community Health Assessment, Secondary Data, Data Analysis]\nformat: \n  html:\n   #code-fold: true\n   title-block-banner: \"#0c2c84\"\ntoc: true\n#image: \"images/hbcu-hedc-pic.png\"\ndraft: true\n---\n\n\n\n# Overview\n\nWorking with secondary data in public health can be challenging. It often involves pulling data from dozens of sources (each with its own limitations), cleaning dozens of datasets, and merging dozens of datasets into a single file. I learn something every time I'm asked to support this process, whether it's a new-to-me data repository I can access, an R package that can eliminate 50 lines of code, or even a philosophical approach that pushes me to think more critically about the big picture.\n\nIn this blog, I discuss how I attempted to streamline the secondary data analyses for Wake County's 2025 Community Health Needs Assessment (CHNA). I'll also reflect on the lessons I learned **this** time around.\n\nStay tuned for a more technical follow-up post with reproducible R code that walks through our process for developing the final tables!\n\n# Approach\n\n## Develop Prioritized Indicator List {#indicator-list}\n\nCHNA's cover a wide range of topics, from Demographics, Access to Care, Community Cohesion, Reproductive & Child Health, and more. This makes it easy to accrue a very long list of indicators.\n\nFor this project, our team at NCIPH worked alongside the steering committee's Secondary Data Analysis Workgroup to collaboratively identify the most important indicators to collect for each topic. **Spending extra time in this phase of the project is well worth it.**\n\n## Leverage Data Repositories\n\nBecause of the sheer amount of effort it takes to produce secondary data deliverables, we generally don’t have sufficient time to thoughtfully investigate and communicate trends from our thoroughly curated dataset.\n\nFor the 2025 Wake CHNA, we worked alongside our partners to simplify our approach: instead of tracking down and pulling 80+ indicators from their respective sources, **we suggested that we streamline secondary data analyses by sourcing *most* of our indicators from the [NC Data Portal](https://ncdataportal.org/) or [Cape Fear Collective’s Community Data Platform](https://healthycommunitiesnc.org/community-data)**.\n\n## Develop Useful and Accessible Deliverables\n\nHistorically, secondary data tables are buried in dozens of pages in the final CHNA report. This is an issue for a few reasons:\n\n1.  Integrating 80+ tables into a stylized Word document or PDF requires tedious programming alongside inevitable manual tweaks.\n\n2.  Developing 80+ tables that comply with [Web Content Accessibility Guidelines 2.2 Level AA standards](https://policies.unc.edu/TDClient/2833/Portal/KB/ArticleDet?ID=131329) in Word and PDF formats is extremely challenging.\n\n3.  This format is largely useless for those who want to access the data!\n\n\\[insert description of what our team landed on\\]\n\n# Process\n\n## Getting Started\n\n### Download Data\n\nWe pulled data from a variety of data sources, including the U.S. Census Bureau, the North Carolina State Center for Health Statistics, the Centers for Disease Control and Prevention, and other key local, state, and federal agencies. Where possible, the team leveraged the following North-Carolina-specific secondary data tools to efficiently collect data: [North Carolina Data Portal](https://ncdataportal.org/) (NCDP) and [Cape Fear Collective’s Community Data Platform](https://healthycommunitiesnc.org/community-data). In this walk-through, I'll focus on the process we followed for the indicators we pulled from the [NCDP](https://ncdataportal.org/).\n\nTo download the data, navigate to **Data \\> [Community Health Assessment](https://ncdataportal.org/community-health-needs-assessment/)**. For our analysis, comparisons were made between Wake County, North Carolina overall, and Mecklenburg County, so we selected **Wake County, NC** and **Mecklenburg County, NC** as our assessment locations. We then selected available indicators from our [prioritized list](#indicator-list), generated a report, and downloaded the data as an Excel table.\n\n![](images/nc-data-portal.gif)\n\nWant to follow along and run the subsequent code blocks? Download and use this snapshot **\\[INSERT LINK\\]** of the actual data we pulled from the NCDP in Fall 2024.\n\n### Load Libraries\n\nNow that we've downloaded the data, let's write some R code to begin working with the data. We'll start by loading the packages we need for our analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(grateful) # package citations\nlibrary(tidyverse) # data wrangling\nlibrary(knitr) # report generation\nlibrary(tidyverse) # data wrangling\nlibrary(janitor) # clean up\nlibrary(labelled) # variable labels; compatible with dplyr \nlibrary(readxl) # reading in excel files\nlibrary(gtsummary) # statistical tests and tables\nlibrary(gt) # Editing GT tables\nlibrary(openxlsx) # writing excel files\n```\n:::\n\n\n\n### Import Data\n\nThe file we outputted has 2 sheets. The first sheet is the report output, which includes the indicators, indicator metadata, and the values for each location. The second sheet contains the data sources for each indicator.\n\nWe'll import each sheet as it's own tibble so we can join the data sources to our indicator table.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncdp_file_path <- \"data/input/nc-data-portal-report.xlsx\"\n\n## Data Portal Report ####\nncdp_report <- read_excel(ncdp_file_path) %>%\n  clean_names() %>%\n  select(-usa, -report_location)\n## Data Sources ####\nncdp_data_sources <- read_excel(ncdp_file_path, sheet = 2) %>%\n  clean_names() %>% \n  # Data category already exists in the report file\n  select(-data_category) %>%\n  mutate(\n    # Create a new column for notes\n    ncdp_notes = str_extract(source, \"^Note:.*(?=Data Source:)\"),\n    # Extract the \"Data Source: \" prefix from the source column\n    source = str_remove(source, \".*Data Source: \"))\n```\n:::\n\n\n\n### Transform\n\nData harmonization is the next step of the process. In other words, we need to standardize the NCDP indicators into a unified format to allow for integration with the dozens of other datasets we pull from.\n\nThis step includes:\n\n-   Joining the report table to data sources\n\n-   [Tidying](https://r4ds.hadley.nz/data-tidy.html) the data\n\n-   Using existing variables to create new variables that match our harmonized format (ex. data category \\> theme)\n\n-   Standardizing variables\n\n-   Cleaning (ex. removing leading or trailing white space)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# TRANSFORM INDICATOR DATA INTO NEW FORMAT ####\nncdp_indicators <- ncdp_report %>%\n  \n  # Join data source information to the data portal report sheet\n  left_join(\n    ncdp_data_sources, \n    by = \"data_indicator\",\n    relationship = \"many-to-many\") %>%\n  \n  # Pivot the data to a long format based on region\n  pivot_longer(\n    cols = c(north_carolina, mecklenburg_county_nc, wake_county_nc),\n    names_to = \"region\",\n    values_to = \"indicator_value\") %>%\n  \n  rename(indicator_desc = indicator_attribute) %>%\n  \n  mutate(\n    # Add notes\n    notes = case_when(\n      data_indicator == \"Access - Childcare Cost Burden\" ~ \"The 2024 Annual Data Release for County Health Rankings used data from 2023 & 2022 for this indicator.\",\n      str_detect(source, \"September 2024\") ~ \"This data is from September 2024.\",\n      TRUE ~ as.character(NA)),\n    \n    # Update region names\n    region = case_when(\n      region == \"north_carolina\" ~ \"North Carolina\",\n      region == \"mecklenburg_county_nc\" ~ \"Mecklenburg\",\n      region == \"wake_county_nc\" ~ \"Wake County\",\n      TRUE ~ region),\n    \n    # Create indicator_bycategory variable\n    indicator_bycategory = str_to_lower(str_extract(data_indicator, \"by [^,]*\")),\n    indicator_bycategory = case_when(\n      str_detect(indicator_bycategory, \"age\") ~ \"by age\",\n      str_detect(indicator_bycategory, \"by race alone\") ~ \"by race\",\n      str_detect(indicator_bycategory, \"race and ethnicity\") ~ \"by race and ethnicity\",\n      str_detect(indicator_bycategory, \"race / ethnicity\") ~ \"by race and ethnicity\",\n      str_detect(indicator_bycategory, \"hispanic origin\") ~ \"by race and ethnicity\",\n      str_detect(indicator_bycategory, \"by ethnicity\") ~ \"by ethnicity\",\n      str_detect(indicator_bycategory, \"disability\") ~ \"by type\",\n      indicator_bycategory %in% c(\"by year\", \"by time period\", \"by tenure\") ~ NA,\n      TRUE ~ paste(indicator_bycategory)),\n    \n    # Map data_category to theme\n    theme = case_when(\n      data_indicator == \"Access to Care - Mental Health Providers\" ~ \"Mental Health & Substance Use\",\n      data_indicator == \"Access - Childcare Cost Burden\" ~ \"Reproductive and Child Health\",\n      data_indicator == \"Poverty - Children Below 200% FPL\" ~ \"Reproductive and Child Health\",\n      str_detect(data_indicator, \"Opioid Overdose\") ~ \"Mental Health & Substance Use\",\n      str_detect(data_indicator, \"Suicide\") ~ \"Mental Health & Substance Use\",\n      str_detect(data_category, \"Economic\") | data_category == \"Employment\" ~ \"Economic Opportunity\",\n      str_detect(data_indicator, \"Food\") | str_detect(data_indicator, \"Grocery\") ~ \"Community Cohesion\", \n      str_detect(data_category, \"Physical\") ~ \"Housing, Neighborhood, & Physical Environment\",\n      str_detect(data_category, \"Neighborhood\") ~ \"Housing, Neighborhood, & Physical Environment\",\n      str_detect(data_category, \"Healthcare\") ~ \"Access to Care\",\n      data_category == \"Health Behaviors\" ~ \"Mental Health & Substance Use\",\n      data_category == \"Health Outcomes\" ~ \"Disease, Illness, & Injury\",\n      TRUE ~ paste(data_category)),\n    \n    # Create year_c variable\n    year_c = str_trim(str_extract(source, \"(?<=\\\\.)[^.]+(?=\\\\.$)\")),\n    \n    # Clean up year_c\n    year_c = case_when(\n      str_detect(data_indicator, \"Population Receiving SNAP Benefits\") ~ paste(indicator_desc),\n      str_detect(data_indicator, \"High School Graduation Rate by Year\") & indicator_desc == \"2016-17\" ~ \"2016-2017\",\n      str_detect(data_indicator, \"High School Graduation Rate by Year\") & indicator_desc == \"2017-18\" ~ \"2017-2018\",\n      str_detect(data_indicator, \"Recreation and Fitness Facilities\") ~ paste(indicator_desc),\n      str_detect(data_indicator, \"Grocery Stores and Supermarkets\") ~ paste(indicator_desc),\n      str_detect(data_indicator, \"Uninsured Population Under Age 65, Percent by Year\") ~ paste(indicator_desc),\n      str_detect(data_indicator, \"Adults with Diagnosed Diabetes by Year\") ~ paste(indicator_desc),\n      data_indicator == \"Employment - Unemployment Rate\" ~ \"2024\",\n      year_c == \"2018-22\" ~ \"2018-2022\",\n      year_c == \"2020-21\" ~ \"2020-2021\",\n      year_c == \"2017-21\" ~ \"2017-2021\",\n      year_c == \"2023&2022\" ~ \"2024\",\n      year_c == \"September 2024\" ~ \"2024\",\n      data_indicator == \"Average Annual Unemployment Rate, 2013-2023\" ~ paste(indicator_desc),\n      TRUE ~ paste(year_c)),\n    \n    # Create year variable based on year_c variable\n    year = if_else(\n      str_detect(year_c, \"-\"),\n      str_extract(year_c, \"(?<=-)\\\\d{4}\"),\n      year_c),\n    \n    # Create indicator variable\n    indicator = data_indicator,\n    \n    # Create type variable\n    type = value_type) %>%\n  \n  # Remove data_category variable which was replaced by theme variable\n  select(-data_category) %>%\n  \n  # Create new columns for numerator_desc and denominator_desc\n  mutate(\n    numerator_desc = if_else(str_detect(value_type, \"numerator\"), indicator_desc, NA),\n    denominator_desc = if_else(str_detect(value_type, \"denominator\"), indicator_desc, NA)\n  ) %>%\n  \n  # Separate rows where value_type has multiple values\n  separate_rows(value_type, sep = \", \") %>%\n  \n  # Trim any extra spaces\n  mutate(value_type = trimws(value_type)) \n```\n:::\n\n\n\nThe table still contains multiple rows per indicator because the NCDP output included separate rows for denominators. We'll further [tidy the data](https://r4ds.hadley.nz/data-tidy.html#sec-tidy-data) and harmonize to our standardized format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncdp_tbl <- ncdp_indicators %>%\n  pivot_wider(\n    names_from = value_type,\n    values_from = indicator_value,\n    values_fill = list(indicator_value = NA) # Fill missing values with NA\n  ) %>%\n  \n  \n  # Update indicator variable\n  mutate(\n    rate_multiplier = case_when(\n      type == \"rate\" & str_detect(indicator_desc, \"(?i)per.*\") ~ str_extract(indicator_desc, \"(?i)per.*\"),\n      type == \"rate\" & str_detect(indicator, \"Grocery Stores\") ~ \"per 100,000 Population\",\n      type == \"rate\" & str_detect(indicator, \"(?i)per.*\") ~ str_extract(indicator, \"(?i)per.*\"),\n      TRUE ~ NA\n    ),\n      \n    rate_multiplier = case_when(\n      str_detect(rate_multiplier, \"Per 100,000 Pop.\") ~ \"per 100,000 Population\",\n      rate_multiplier == \"Per 100,000 Population)\" ~ \"per 100,000 Population\",\n      str_detect(rate_multiplier, \"per 100,000 Population by Year\") ~ \"per 100,000 Population\",\n      TRUE ~ rate_multiplier\n    ),\n    \n    indicator = case_when(\n      indicator_desc %in% c(\"Population Density (Per Square Mile)\", \"Total Land Area(Square Miles)\") ~ paste(indicator_desc),\n      str_detect(indicator, \"Recreation and Fitness Facilities\") ~ \"Recreation and Fitness Facilities\",\n      str_detect(indicator, \"Fast Food Restaurants\") ~ \"Fast Food Restaurants\",\n      str_detect(indicator, \"Grocery Stores and Supermarkets\") ~ \"Grocery Stores and Supermarkets\",\n      str_ends(indicator, \", Percent\") ~ str_remove(indicator, \", Percent.*\"),\n      str_ends(indicator, \", Yearly Trend\") ~ str_remove(indicator, \", Yearly Trend*\"),\n      str_ends(indicator, \", Total\") ~ str_remove(indicator, \", Total.*\"),\n      str_ends(indicator, \", Rate per 100,000 Population\") ~ str_remove(indicator, \", Rate.*\"),\n      str_ends(indicator, \", Rate per 10,000 Housing Units\") ~ str_remove(indicator, \", Rate.*\"),\n      str_ends(indicator, \", Annual Rate (Per 100,000 Pop.)\") ~ str_remove(indicator, \", Annual.*\"),\n      str_ends(indicator, \",Annual Rate per 100,000 Population\") ~ str_remove(indicator, \",Annual\"),\n      str_ends(indicator, \" \\\\(Per 100,000 Population\\\\)\") ~ str_remove(indicator, \" \\\\(Per*\"),\n      str_detect(indicator, \", Crude Rate \\\\(Per 100,000 Pop\\\\.\\\\)\") ~ str_remove(indicator, \", Crude Rate \\\\(Per 100,000 Pop\\\\.\\\\)\"),\n      str_detect(indicator, \"Uninsured Population Under Age 65, Percent by Year\") ~ \"Uninsured Population Under Age 65\",\n      str_detect(indicator, \"by Year\") ~ str_replace(indicator, \" by Year.*\", \"\"),\n      indicator == \"Average Annual Unemployment Rate, 2013-2023\" ~ \"Average Annual Unemployment Rate\",\n      TRUE ~ indicator),\n    \n    # Update indicator_desc\n    indicator_desc = str_remove(indicator_desc, \", Percent.*\"),\n    \n    indicator_desc = if_else(str_starts(indicator_desc, \"2\"), NA, indicator_desc)\n      \n  ) %>%\n  \n  # Smoosh duplicate rows together\n  group_by(year, region, indicator, indicator_desc) %>%\n  mutate(\n    count = first(na.omit(count)),\n    numerator = first(na.omit(numerator)),\n    denominator = first(na.omit(denominator)),\n    percent = first(na.omit(percent)),\n    rate = first(na.omit(rate))) %>%\n  ungroup() %>%\n  \n  # Smoosh denominators into other rows\n  group_by(region, year, indicator) %>%\n  mutate(\n    denominator = coalesce(denominator, first(denominator[!is.na(denominator)])),\n    denominator_desc = coalesce(denominator_desc, first(denominator_desc[!is.na(denominator_desc)]))) %>%\n  ungroup() %>%\n  \n   \n  mutate(\n    # Update type variable\n    type = case_when(\n    indicator_desc == \"Number of Providers\" ~ \"count\",\n    !is.na(dollars) ~ \"dollars\",\n    !is.na(count) & !is.na(percent) ~ \"count and percent\",\n    !is.na(rate) ~ \"rate\", \n    !is.na(count) ~ \"count\",\n    !is.na(percent) ~ \"percent\",\n    TRUE ~ NA),\n    \n    # Update count variable\n    count = case_when(\n      indicator_desc == \"Number of Providers\" ~ numerator, \n      type == \"dollars\" ~ dollars,\n      TRUE ~ count),\n    \n    # Update numerator variable\n    numerator = ifelse(indicator_desc == \"Number of Providers\", NA, numerator),\n    \n    # Update numerator descriptions\n    numerator_desc = case_when(\n      indicator == \"Grocery Stores and Supermarkets\" ~ \"Number of Establishments\",\n      indicator == \"Grocery Stores and Supermarkets\" ~ \"Number of Establishments\",\n      indicator == \"Population Living Close to Public Transit: by Distance\" ~ \"Population Within 0.5 Miles of Public Transit\",\n      indicator == \"Average Annual Unemployment Rate, 2013-2023\" ~ \"Number Unemployed\",\n      str_detect(indicator, \"High School Graduation Rate\") ~ \"Number of Diplomas Issued\",\n      indicator == \"Recreation and Fitness Facilities\" ~ \"Number of Establishments\",\n      TRUE ~ numerator_desc),\n    \n    # Update numerator descriptions\n    denominator_desc = case_when(\n      indicator == \"Grocery Stores and Supermarkets\" ~ \"Total Population\",\n      indicator == \"Grocery Stores and Supermarkets\" ~ \"Total Population\",\n      indicator == \"Population Living Close to Public Transit: by Distance\" ~ \"Total Population\",\n      indicator == \"Average Annual Unemployment Rate, 2013-2023\" ~ \"Labor Force\",\n      str_detect(indicator, \"High School Graduation Rate\") ~ \"Adjusted Student Cohort\",\n      indicator == \"Recreation and Fitness Facilities\" ~ \"Total Population\",\n      TRUE ~ denominator_desc)\n    \n    ) %>%\n  \n  # Identify and remove duplicates from numerator/count smooshing\n  group_by(across(-numerator_desc)) %>%\n  mutate(is_duplicate = n() > 1) %>%\n  ungroup() %>%\n  filter(!(is_duplicate == TRUE & is.na(numerator_desc))) %>%\n  \n  # Identify and remove duplicates from denominator smooshing\n  filter(!(final_indicator == 0 & is.na(count) & is.na(percent) & is.na(rate))) %>%\n  \n  # Remove unnecessary indicators \n  filter(indicator != \"Population Density (Per Square Mile)\") %>%\n  \n  # Reorder columns (theme, source, region, year, year_c, indicator, indicator_desc, indicator_bycategory, type, count, percent, rate, rate_type, notes)\n  # Select only final columns \n  select(\n    theme, \n    source, \n    region, \n    year, \n    year_c, \n    indicator, \n    indicator_desc, \n    indicator_bycategory, \n    type, \n    count, \n    numerator,\n    denominator,\n    percent,\n    rate, \n    numerator_desc,\n    denominator_desc,\n    rate_multiplier,\n    notes)\n```\n:::\n\n\n\nThen we'll output the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncdp_tbl %>% write.xlsx(\"data/output/ncdp.xlsx\")\n```\n:::\n\n\n\n### Merge\n\n### Create Tables\n\n### Output Tables\n\n# Final Products\n\nWe developed an [HTML report](https://livewellwake.org/priorities/) with the data tables that meets WCAG 2.0 (Level AA) guidelines\\* and a [downloadable dataset and data dictionary](https://docs.google.com/spreadsheets/d/1xOPjVWS8V2dPsNLEBXAe9KG9NQtau7qMNFX5kShiwso/edit?usp=sharing) with the secondary data shown in the report.\n\nUltimately, this means community members can:\n\n1.  Visit the Live Well Wake website to [investigate the tables](https://livewellwake.org/priorities/) instead of scrolling to the appendix of the report document\n\n2.  [Use the dataset](https://docs.google.com/spreadsheets/d/1xOPjVWS8V2dPsNLEBXAe9KG9NQtau7qMNFX5kShiwso/edit?usp=sharing) to conduct their own exploratory analyses or create their own visualizations.\n\n*\\*Note: While the report meets WCAG 2.0 guidelines, the website it's hosted on does not.*\n\n# Lessons Learned\n\n## Stick to a Single Approach\n\nWhile leveraging data repositories was helpful in streamlining the analysis of roughly 50% of our indicators, we still had to source data for the remaining half. Moving forward, I'd lean towards recommending a single approach to our partners (i.e., everything from NC data tools) to truly streamline these efforts, acknowledging that there may be a handful (3-10 max.) of indicators unique to local interests that we track down outside of the data tools. **This would free up our time, allowing us to focus on meaningfully interpreting, visualizing, and presenting the data**.\n\n## Enhance Data Accessibility\n\nThe dataset and standalone HTML report of the tables is a step up from being buried in a 200-page document. However, there's work to be done to make the data more accessible. For example, I'd love think through how we can incorporate more interactive components for users. While several exciting and shiny ideas come to mind, **I'm interested in asking community members, folks from the steering committee, and our partners what's on their wishlist**.\n\n# Citations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add packages used to bibliography\ncite_packages(output = \"table\", out.dir = \".\") %>% kable()\n```\n\n::: {.cell-output-display}\n\n\n|Package   |Version |Citation                                       |\n|:---------|:-------|:----------------------------------------------|\n|base      |4.3.0   |@base                                          |\n|gt        |1.0.0   |@gt                                            |\n|gtsummary |2.4.0   |@gtsummary                                     |\n|janitor   |2.2.0   |@janitor                                       |\n|knitr     |1.42    |@knitr2014; @knitr2015; @knitr2023             |\n|labelled  |2.11.0  |@labelled                                      |\n|openxlsx  |4.2.8   |@openxlsx                                      |\n|rmarkdown |2.21    |@rmarkdown2018; @rmarkdown2020; @rmarkdown2023 |\n|tidyverse |2.0.0   |@tidyverse                                     |\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}